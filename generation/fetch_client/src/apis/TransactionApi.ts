/* tslint:disable */
/* eslint-disable */
/**
 * BankWiz API
 * An API for accessing banking functionalities provided by BankWiz
 *
 * The version of the OpenAPI document: 0.2.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TransactionCreationRequest,
  TransactionDTO,
  TransactionUpdateRequest,
} from '../models/index';
import {
    TransactionCreationRequestFromJSON,
    TransactionCreationRequestToJSON,
    TransactionDTOFromJSON,
    TransactionDTOToJSON,
    TransactionUpdateRequestFromJSON,
    TransactionUpdateRequestToJSON,
} from '../models/index';

export interface AddTransactionRequest {
    transactionCreationRequest: TransactionCreationRequest;
}

export interface DeleteTransactionRequest {
    transactionId: number;
}

export interface GetTransactionRequest {
    transactionId: number;
}

export interface GetTransactionsByBankAccountRequest {
    bankAccountId: number;
}

export interface GetTransactionsByGroupRequest {
    groupId: number;
}

export interface UpdateTransactionRequest {
    transactionId: number;
    transactionUpdateRequest: TransactionUpdateRequest;
}

/**
 * TransactionApi - interface
 * 
 * @export
 * @interface TransactionApiInterface
 */
export interface TransactionApiInterface {
    /**
     * 
     * @summary Add an transaction
     * @param {TransactionCreationRequest} transactionCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiInterface
     */
    addTransactionRaw(requestParameters: AddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDTO>>;

    /**
     * Add an transaction
     */
    addTransaction(requestParameters: AddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDTO>;

    /**
     * 
     * @summary Delete a transaction
     * @param {number} transactionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiInterface
     */
    deleteTransactionRaw(requestParameters: DeleteTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a transaction
     */
    deleteTransaction(requestParameters: DeleteTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get a transaction
     * @param {number} transactionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiInterface
     */
    getTransactionRaw(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDTO>>;

    /**
     * Get a transaction
     */
    getTransaction(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDTO>;

    /**
     * 
     * @summary Get all transactions for a bankAccount
     * @param {number} bankAccountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiInterface
     */
    getTransactionsByBankAccountRaw(requestParameters: GetTransactionsByBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionDTO>>>;

    /**
     * Get all transactions for a bankAccount
     */
    getTransactionsByBankAccount(requestParameters: GetTransactionsByBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionDTO>>;

    /**
     * 
     * @summary Get all transactions for a group
     * @param {number} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiInterface
     */
    getTransactionsByGroupRaw(requestParameters: GetTransactionsByGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionDTO>>>;

    /**
     * Get all transactions for a group
     */
    getTransactionsByGroup(requestParameters: GetTransactionsByGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionDTO>>;

    /**
     * 
     * @summary Update the transaction information
     * @param {number} transactionId 
     * @param {TransactionUpdateRequest} transactionUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiInterface
     */
    updateTransactionRaw(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDTO>>;

    /**
     * Update the transaction information
     */
    updateTransaction(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDTO>;

}

/**
 * 
 */
export class TransactionApi extends runtime.BaseAPI implements TransactionApiInterface {

    /**
     * Add an transaction
     */
    async addTransactionRaw(requestParameters: AddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDTO>> {
        if (requestParameters.transactionCreationRequest === null || requestParameters.transactionCreationRequest === undefined) {
            throw new runtime.RequiredError('transactionCreationRequest','Required parameter requestParameters.transactionCreationRequest was null or undefined when calling addTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionCreationRequestToJSON(requestParameters.transactionCreationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionDTOFromJSON(jsonValue));
    }

    /**
     * Add an transaction
     */
    async addTransaction(requestParameters: AddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDTO> {
        const response = await this.addTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a transaction
     */
    async deleteTransactionRaw(requestParameters: DeleteTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
            throw new runtime.RequiredError('transactionId','Required parameter requestParameters.transactionId was null or undefined when calling deleteTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transaction/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a transaction
     */
    async deleteTransaction(requestParameters: DeleteTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTransactionRaw(requestParameters, initOverrides);
    }

    /**
     * Get a transaction
     */
    async getTransactionRaw(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDTO>> {
        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
            throw new runtime.RequiredError('transactionId','Required parameter requestParameters.transactionId was null or undefined when calling getTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transaction/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionDTOFromJSON(jsonValue));
    }

    /**
     * Get a transaction
     */
    async getTransaction(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDTO> {
        const response = await this.getTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all transactions for a bankAccount
     */
    async getTransactionsByBankAccountRaw(requestParameters: GetTransactionsByBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionDTO>>> {
        if (requestParameters.bankAccountId === null || requestParameters.bankAccountId === undefined) {
            throw new runtime.RequiredError('bankAccountId','Required parameter requestParameters.bankAccountId was null or undefined when calling getTransactionsByBankAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.bankAccountId !== undefined) {
            queryParameters['bankAccountId'] = requestParameters.bankAccountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transaction/findByBankAccount`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionDTOFromJSON));
    }

    /**
     * Get all transactions for a bankAccount
     */
    async getTransactionsByBankAccount(requestParameters: GetTransactionsByBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionDTO>> {
        const response = await this.getTransactionsByBankAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all transactions for a group
     */
    async getTransactionsByGroupRaw(requestParameters: GetTransactionsByGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionDTO>>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getTransactionsByGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.groupId !== undefined) {
            queryParameters['groupId'] = requestParameters.groupId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transaction/findByGroup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionDTOFromJSON));
    }

    /**
     * Get all transactions for a group
     */
    async getTransactionsByGroup(requestParameters: GetTransactionsByGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionDTO>> {
        const response = await this.getTransactionsByGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the transaction information
     */
    async updateTransactionRaw(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDTO>> {
        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
            throw new runtime.RequiredError('transactionId','Required parameter requestParameters.transactionId was null or undefined when calling updateTransaction.');
        }

        if (requestParameters.transactionUpdateRequest === null || requestParameters.transactionUpdateRequest === undefined) {
            throw new runtime.RequiredError('transactionUpdateRequest','Required parameter requestParameters.transactionUpdateRequest was null or undefined when calling updateTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transaction/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionUpdateRequestToJSON(requestParameters.transactionUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionDTOFromJSON(jsonValue));
    }

    /**
     * Update the transaction information
     */
    async updateTransaction(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDTO> {
        const response = await this.updateTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
