/* tslint:disable */
/* eslint-disable */
/**
 * BankWiz API
 * An API for accessing banking functionalities provided by BankWiz
 *
 * The version of the OpenAPI document: 0.2.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BankAccountCreationRequest,
  BankAccountDTO,
  BankAccountGroupDTO,
  BankAccountUpdateRequest,
} from '../models/index';
import {
    BankAccountCreationRequestFromJSON,
    BankAccountCreationRequestToJSON,
    BankAccountDTOFromJSON,
    BankAccountDTOToJSON,
    BankAccountGroupDTOFromJSON,
    BankAccountGroupDTOToJSON,
    BankAccountUpdateRequestFromJSON,
    BankAccountUpdateRequestToJSON,
} from '../models/index';

export interface AddAccountRequest {
    bankAccountCreationRequest: BankAccountCreationRequest;
}

export interface DeleteAccountRequest {
    bankAccountId: number;
}

export interface GetAccountRequest {
    bankAccountId: number;
}

export interface UpdateAccountRequest {
    bankAccountId: number;
    bankAccountUpdateRequest: BankAccountUpdateRequest;
}

/**
 * BankAccountApi - interface
 * 
 * @export
 * @interface BankAccountApiInterface
 */
export interface BankAccountApiInterface {
    /**
     * 
     * @summary Add an account
     * @param {BankAccountCreationRequest} bankAccountCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApiInterface
     */
    addAccountRaw(requestParameters: AddAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDTO>>;

    /**
     * Add an account
     */
    addAccount(requestParameters: AddAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDTO>;

    /**
     * 
     * @summary Delete an account
     * @param {number} bankAccountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApiInterface
     */
    deleteAccountRaw(requestParameters: DeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an account
     */
    deleteAccount(requestParameters: DeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get an account
     * @param {number} bankAccountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApiInterface
     */
    getAccountRaw(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDTO>>;

    /**
     * Get an account
     */
    getAccount(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDTO>;

    /**
     * 
     * @summary Get my bank accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApiInterface
     */
    getBankAccountsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BankAccountGroupDTO>>>;

    /**
     * Get my bank accounts
     */
    getBankAccounts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BankAccountGroupDTO>>;

    /**
     * 
     * @summary Update account information
     * @param {number} bankAccountId 
     * @param {BankAccountUpdateRequest} bankAccountUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApiInterface
     */
    updateAccountRaw(requestParameters: UpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDTO>>;

    /**
     * Update account information
     */
    updateAccount(requestParameters: UpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDTO>;

}

/**
 * 
 */
export class BankAccountApi extends runtime.BaseAPI implements BankAccountApiInterface {

    /**
     * Add an account
     */
    async addAccountRaw(requestParameters: AddAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDTO>> {
        if (requestParameters.bankAccountCreationRequest === null || requestParameters.bankAccountCreationRequest === undefined) {
            throw new runtime.RequiredError('bankAccountCreationRequest','Required parameter requestParameters.bankAccountCreationRequest was null or undefined when calling addAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bankAccount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BankAccountCreationRequestToJSON(requestParameters.bankAccountCreationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankAccountDTOFromJSON(jsonValue));
    }

    /**
     * Add an account
     */
    async addAccount(requestParameters: AddAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDTO> {
        const response = await this.addAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an account
     */
    async deleteAccountRaw(requestParameters: DeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.bankAccountId === null || requestParameters.bankAccountId === undefined) {
            throw new runtime.RequiredError('bankAccountId','Required parameter requestParameters.bankAccountId was null or undefined when calling deleteAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bankAccount/{bankAccountId}`.replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an account
     */
    async deleteAccount(requestParameters: DeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAccountRaw(requestParameters, initOverrides);
    }

    /**
     * Get an account
     */
    async getAccountRaw(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDTO>> {
        if (requestParameters.bankAccountId === null || requestParameters.bankAccountId === undefined) {
            throw new runtime.RequiredError('bankAccountId','Required parameter requestParameters.bankAccountId was null or undefined when calling getAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bankAccount/{bankAccountId}`.replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankAccountDTOFromJSON(jsonValue));
    }

    /**
     * Get an account
     */
    async getAccount(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDTO> {
        const response = await this.getAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get my bank accounts
     */
    async getBankAccountsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BankAccountGroupDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bankAccount/bankAccounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BankAccountGroupDTOFromJSON));
    }

    /**
     * Get my bank accounts
     */
    async getBankAccounts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BankAccountGroupDTO>> {
        const response = await this.getBankAccountsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update account information
     */
    async updateAccountRaw(requestParameters: UpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountDTO>> {
        if (requestParameters.bankAccountId === null || requestParameters.bankAccountId === undefined) {
            throw new runtime.RequiredError('bankAccountId','Required parameter requestParameters.bankAccountId was null or undefined when calling updateAccount.');
        }

        if (requestParameters.bankAccountUpdateRequest === null || requestParameters.bankAccountUpdateRequest === undefined) {
            throw new runtime.RequiredError('bankAccountUpdateRequest','Required parameter requestParameters.bankAccountUpdateRequest was null or undefined when calling updateAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/bankAccount/{bankAccountId}`.replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BankAccountUpdateRequestToJSON(requestParameters.bankAccountUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankAccountDTOFromJSON(jsonValue));
    }

    /**
     * Update account information
     */
    async updateAccount(requestParameters: UpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountDTO> {
        const response = await this.updateAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
