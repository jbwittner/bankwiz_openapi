/* tslint:disable */
/* eslint-disable */
/**
 * BankWiz API
 * An API for accessing banking functionalities provided by BankWiz
 *
 * The version of the OpenAPI document: 0.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BankOperationCreationRequest } from '../model';
// @ts-ignore
import { BankOperationDTO } from '../model';
// @ts-ignore
import { BankOperationUpdateRequest } from '../model';
/**
 * BankOperationApi - axios parameter creator
 * @export
 */
export const BankOperationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add an bank operation
         * @param {BankOperationCreationRequest} bankOperationCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBankOperation: async (bankOperationCreationRequest: BankOperationCreationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankOperationCreationRequest' is not null or undefined
            assertParamExists('addBankOperation', 'bankOperationCreationRequest', bankOperationCreationRequest)
            const localVarPath = `/bankOperation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankOperationCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a bank operation
         * @param {number} bankOperationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankOperation: async (bankOperationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankOperationId' is not null or undefined
            assertParamExists('deleteBankOperation', 'bankOperationId', bankOperationId)
            const localVarPath = `/bankOperation/{bankOperationId}`
                .replace(`{${"bankOperationId"}}`, encodeURIComponent(String(bankOperationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a bank operation
         * @param {number} bankOperationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankOperation: async (bankOperationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankOperationId' is not null or undefined
            assertParamExists('getBankOperation', 'bankOperationId', bankOperationId)
            const localVarPath = `/bankOperation/{bankOperationId}`
                .replace(`{${"bankOperationId"}}`, encodeURIComponent(String(bankOperationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the bank operation information
         * @param {number} bankOperationId 
         * @param {BankOperationUpdateRequest} bankOperationUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBankOperation: async (bankOperationId: number, bankOperationUpdateRequest: BankOperationUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankOperationId' is not null or undefined
            assertParamExists('updateBankOperation', 'bankOperationId', bankOperationId)
            // verify required parameter 'bankOperationUpdateRequest' is not null or undefined
            assertParamExists('updateBankOperation', 'bankOperationUpdateRequest', bankOperationUpdateRequest)
            const localVarPath = `/bankOperation/{bankOperationId}`
                .replace(`{${"bankOperationId"}}`, encodeURIComponent(String(bankOperationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankOperationUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BankOperationApi - functional programming interface
 * @export
 */
export const BankOperationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BankOperationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add an bank operation
         * @param {BankOperationCreationRequest} bankOperationCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBankOperation(bankOperationCreationRequest: BankOperationCreationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankOperationDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBankOperation(bankOperationCreationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a bank operation
         * @param {number} bankOperationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBankOperation(bankOperationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBankOperation(bankOperationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a bank operation
         * @param {number} bankOperationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBankOperation(bankOperationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankOperationDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBankOperation(bankOperationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the bank operation information
         * @param {number} bankOperationId 
         * @param {BankOperationUpdateRequest} bankOperationUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBankOperation(bankOperationId: number, bankOperationUpdateRequest: BankOperationUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankOperationDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBankOperation(bankOperationId, bankOperationUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BankOperationApi - factory interface
 * @export
 */
export const BankOperationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BankOperationApiFp(configuration)
    return {
        /**
         * 
         * @summary Add an bank operation
         * @param {BankOperationCreationRequest} bankOperationCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBankOperation(bankOperationCreationRequest: BankOperationCreationRequest, options?: any): AxiosPromise<BankOperationDTO> {
            return localVarFp.addBankOperation(bankOperationCreationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a bank operation
         * @param {number} bankOperationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankOperation(bankOperationId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBankOperation(bankOperationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a bank operation
         * @param {number} bankOperationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankOperation(bankOperationId: number, options?: any): AxiosPromise<BankOperationDTO> {
            return localVarFp.getBankOperation(bankOperationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the bank operation information
         * @param {number} bankOperationId 
         * @param {BankOperationUpdateRequest} bankOperationUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBankOperation(bankOperationId: number, bankOperationUpdateRequest: BankOperationUpdateRequest, options?: any): AxiosPromise<BankOperationDTO> {
            return localVarFp.updateBankOperation(bankOperationId, bankOperationUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BankOperationApi - interface
 * @export
 * @interface BankOperationApi
 */
export interface BankOperationApiInterface {
    /**
     * 
     * @summary Add an bank operation
     * @param {BankOperationCreationRequest} bankOperationCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankOperationApiInterface
     */
    addBankOperation(bankOperationCreationRequest: BankOperationCreationRequest, options?: AxiosRequestConfig): AxiosPromise<BankOperationDTO>;

    /**
     * 
     * @summary Delete a bank operation
     * @param {number} bankOperationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankOperationApiInterface
     */
    deleteBankOperation(bankOperationId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get a bank operation
     * @param {number} bankOperationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankOperationApiInterface
     */
    getBankOperation(bankOperationId: number, options?: AxiosRequestConfig): AxiosPromise<BankOperationDTO>;

    /**
     * 
     * @summary Update the bank operation information
     * @param {number} bankOperationId 
     * @param {BankOperationUpdateRequest} bankOperationUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankOperationApiInterface
     */
    updateBankOperation(bankOperationId: number, bankOperationUpdateRequest: BankOperationUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<BankOperationDTO>;

}

/**
 * BankOperationApi - object-oriented interface
 * @export
 * @class BankOperationApi
 * @extends {BaseAPI}
 */
export class BankOperationApi extends BaseAPI implements BankOperationApiInterface {
    /**
     * 
     * @summary Add an bank operation
     * @param {BankOperationCreationRequest} bankOperationCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankOperationApi
     */
    public addBankOperation(bankOperationCreationRequest: BankOperationCreationRequest, options?: AxiosRequestConfig) {
        return BankOperationApiFp(this.configuration).addBankOperation(bankOperationCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a bank operation
     * @param {number} bankOperationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankOperationApi
     */
    public deleteBankOperation(bankOperationId: number, options?: AxiosRequestConfig) {
        return BankOperationApiFp(this.configuration).deleteBankOperation(bankOperationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a bank operation
     * @param {number} bankOperationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankOperationApi
     */
    public getBankOperation(bankOperationId: number, options?: AxiosRequestConfig) {
        return BankOperationApiFp(this.configuration).getBankOperation(bankOperationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the bank operation information
     * @param {number} bankOperationId 
     * @param {BankOperationUpdateRequest} bankOperationUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankOperationApi
     */
    public updateBankOperation(bankOperationId: number, bankOperationUpdateRequest: BankOperationUpdateRequest, options?: AxiosRequestConfig) {
        return BankOperationApiFp(this.configuration).updateBankOperation(bankOperationId, bankOperationUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

