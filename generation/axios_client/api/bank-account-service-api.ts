/* tslint:disable */
/* eslint-disable */
/**
 * BankWiz API
 * An API for accessing banking functionalities provided by BankWiz
 *
 * The version of the OpenAPI document: 0.11.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BankAccountCreationRequest } from '../model';
// @ts-ignore
import { BankAccountIndexDTO } from '../model';
// @ts-ignore
import { GroupBankAccountIndexDTO } from '../model';
/**
 * BankAccountServiceApi - axios parameter creator
 * @export
 */
export const BankAccountServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a bank account
         * @param {BankAccountCreationRequest} bankAccountCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBankAccount: async (bankAccountCreationRequest: BankAccountCreationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankAccountCreationRequest' is not null or undefined
            assertParamExists('createBankAccount', 'bankAccountCreationRequest', bankAccountCreationRequest)
            const localVarPath = `/bankaccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankAccountCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all bank account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBankAccount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bankaccount/bankaccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BankAccountServiceApi - functional programming interface
 * @export
 */
export const BankAccountServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BankAccountServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a bank account
         * @param {BankAccountCreationRequest} bankAccountCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBankAccount(bankAccountCreationRequest: BankAccountCreationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountIndexDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBankAccount(bankAccountCreationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all bank account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBankAccount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupBankAccountIndexDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBankAccount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BankAccountServiceApi - factory interface
 * @export
 */
export const BankAccountServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BankAccountServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a bank account
         * @param {BankAccountCreationRequest} bankAccountCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBankAccount(bankAccountCreationRequest: BankAccountCreationRequest, options?: any): AxiosPromise<BankAccountIndexDTO> {
            return localVarFp.createBankAccount(bankAccountCreationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all bank account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBankAccount(options?: any): AxiosPromise<Array<GroupBankAccountIndexDTO>> {
            return localVarFp.getAllBankAccount(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BankAccountServiceApi - interface
 * @export
 * @interface BankAccountServiceApi
 */
export interface BankAccountServiceApiInterface {
    /**
     * 
     * @summary Create a bank account
     * @param {BankAccountCreationRequest} bankAccountCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountServiceApiInterface
     */
    createBankAccount(bankAccountCreationRequest: BankAccountCreationRequest, options?: AxiosRequestConfig): AxiosPromise<BankAccountIndexDTO>;

    /**
     * 
     * @summary Get all bank account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountServiceApiInterface
     */
    getAllBankAccount(options?: AxiosRequestConfig): AxiosPromise<Array<GroupBankAccountIndexDTO>>;

}

/**
 * BankAccountServiceApi - object-oriented interface
 * @export
 * @class BankAccountServiceApi
 * @extends {BaseAPI}
 */
export class BankAccountServiceApi extends BaseAPI implements BankAccountServiceApiInterface {
    /**
     * 
     * @summary Create a bank account
     * @param {BankAccountCreationRequest} bankAccountCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountServiceApi
     */
    public createBankAccount(bankAccountCreationRequest: BankAccountCreationRequest, options?: AxiosRequestConfig) {
        return BankAccountServiceApiFp(this.configuration).createBankAccount(bankAccountCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all bank account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountServiceApi
     */
    public getAllBankAccount(options?: AxiosRequestConfig) {
        return BankAccountServiceApiFp(this.configuration).getAllBankAccount(options).then((request) => request(this.axios, this.basePath));
    }
}

