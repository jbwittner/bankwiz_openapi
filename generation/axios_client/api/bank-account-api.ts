/* tslint:disable */
/* eslint-disable */
/**
 * BankWiz API
 * An API for accessing banking functionalities provided by BankWiz
 *
 * The version of the OpenAPI document: 0.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BankAccountCreationRequest } from '../model';
// @ts-ignore
import { BankAccountDTO } from '../model';
// @ts-ignore
import { BankAccountGroupDTO } from '../model';
// @ts-ignore
import { BankAccountUpdateRequest } from '../model';
/**
 * BankAccountApi - axios parameter creator
 * @export
 */
export const BankAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add an account
         * @param {BankAccountCreationRequest} bankAccountCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccount: async (bankAccountCreationRequest: BankAccountCreationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankAccountCreationRequest' is not null or undefined
            assertParamExists('addAccount', 'bankAccountCreationRequest', bankAccountCreationRequest)
            const localVarPath = `/bankAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankAccountCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an account
         * @param {number} bankAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount: async (bankAccountId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('deleteAccount', 'bankAccountId', bankAccountId)
            const localVarPath = `/bankAccount/{bankAccountId}`
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an account
         * @param {number} bankAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (bankAccountId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('getAccount', 'bankAccountId', bankAccountId)
            const localVarPath = `/bankAccount/{bankAccountId}`
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get my bank accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccounts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bankAccount/bankAccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update account information
         * @param {number} bankAccountId 
         * @param {BankAccountUpdateRequest} bankAccountUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount: async (bankAccountId: number, bankAccountUpdateRequest: BankAccountUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('updateAccount', 'bankAccountId', bankAccountId)
            // verify required parameter 'bankAccountUpdateRequest' is not null or undefined
            assertParamExists('updateAccount', 'bankAccountUpdateRequest', bankAccountUpdateRequest)
            const localVarPath = `/bankAccount/{bankAccountId}`
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankAccountUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BankAccountApi - functional programming interface
 * @export
 */
export const BankAccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BankAccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add an account
         * @param {BankAccountCreationRequest} bankAccountCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAccount(bankAccountCreationRequest: BankAccountCreationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAccount(bankAccountCreationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an account
         * @param {number} bankAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccount(bankAccountId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccount(bankAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an account
         * @param {number} bankAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(bankAccountId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(bankAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get my bank accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBankAccounts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankAccountGroupDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBankAccounts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update account information
         * @param {number} bankAccountId 
         * @param {BankAccountUpdateRequest} bankAccountUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccount(bankAccountId: number, bankAccountUpdateRequest: BankAccountUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccount(bankAccountId, bankAccountUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BankAccountApi - factory interface
 * @export
 */
export const BankAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BankAccountApiFp(configuration)
    return {
        /**
         * 
         * @summary Add an account
         * @param {BankAccountCreationRequest} bankAccountCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccount(bankAccountCreationRequest: BankAccountCreationRequest, options?: any): AxiosPromise<BankAccountDTO> {
            return localVarFp.addAccount(bankAccountCreationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an account
         * @param {number} bankAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount(bankAccountId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAccount(bankAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an account
         * @param {number} bankAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(bankAccountId: number, options?: any): AxiosPromise<BankAccountDTO> {
            return localVarFp.getAccount(bankAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get my bank accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccounts(options?: any): AxiosPromise<Array<BankAccountGroupDTO>> {
            return localVarFp.getBankAccounts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update account information
         * @param {number} bankAccountId 
         * @param {BankAccountUpdateRequest} bankAccountUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(bankAccountId: number, bankAccountUpdateRequest: BankAccountUpdateRequest, options?: any): AxiosPromise<BankAccountDTO> {
            return localVarFp.updateAccount(bankAccountId, bankAccountUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BankAccountApi - interface
 * @export
 * @interface BankAccountApi
 */
export interface BankAccountApiInterface {
    /**
     * 
     * @summary Add an account
     * @param {BankAccountCreationRequest} bankAccountCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApiInterface
     */
    addAccount(bankAccountCreationRequest: BankAccountCreationRequest, options?: AxiosRequestConfig): AxiosPromise<BankAccountDTO>;

    /**
     * 
     * @summary Delete an account
     * @param {number} bankAccountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApiInterface
     */
    deleteAccount(bankAccountId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get an account
     * @param {number} bankAccountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApiInterface
     */
    getAccount(bankAccountId: number, options?: AxiosRequestConfig): AxiosPromise<BankAccountDTO>;

    /**
     * 
     * @summary Get my bank accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApiInterface
     */
    getBankAccounts(options?: AxiosRequestConfig): AxiosPromise<Array<BankAccountGroupDTO>>;

    /**
     * 
     * @summary Update account information
     * @param {number} bankAccountId 
     * @param {BankAccountUpdateRequest} bankAccountUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApiInterface
     */
    updateAccount(bankAccountId: number, bankAccountUpdateRequest: BankAccountUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<BankAccountDTO>;

}

/**
 * BankAccountApi - object-oriented interface
 * @export
 * @class BankAccountApi
 * @extends {BaseAPI}
 */
export class BankAccountApi extends BaseAPI implements BankAccountApiInterface {
    /**
     * 
     * @summary Add an account
     * @param {BankAccountCreationRequest} bankAccountCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApi
     */
    public addAccount(bankAccountCreationRequest: BankAccountCreationRequest, options?: AxiosRequestConfig) {
        return BankAccountApiFp(this.configuration).addAccount(bankAccountCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an account
     * @param {number} bankAccountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApi
     */
    public deleteAccount(bankAccountId: number, options?: AxiosRequestConfig) {
        return BankAccountApiFp(this.configuration).deleteAccount(bankAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an account
     * @param {number} bankAccountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApi
     */
    public getAccount(bankAccountId: number, options?: AxiosRequestConfig) {
        return BankAccountApiFp(this.configuration).getAccount(bankAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get my bank accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApi
     */
    public getBankAccounts(options?: AxiosRequestConfig) {
        return BankAccountApiFp(this.configuration).getBankAccounts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update account information
     * @param {number} bankAccountId 
     * @param {BankAccountUpdateRequest} bankAccountUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountApi
     */
    public updateAccount(bankAccountId: number, bankAccountUpdateRequest: BankAccountUpdateRequest, options?: AxiosRequestConfig) {
        return BankAccountApiFp(this.configuration).updateAccount(bankAccountId, bankAccountUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

