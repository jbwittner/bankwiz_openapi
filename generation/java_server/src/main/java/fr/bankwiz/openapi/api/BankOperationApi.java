/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fr.bankwiz.openapi.api;

import fr.bankwiz.openapi.model.BankOperationCreationRequest;
import fr.bankwiz.openapi.model.BankOperationDTO;
import fr.bankwiz.openapi.model.BankOperationUpdateRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Bank operation", description = "the Bank operation API")
public interface BankOperationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /bankOperation : Add an bank operation
     *
     * @param bankOperationCreationRequest  (required)
     * @return Account line added successfully (status code 200)
     *         or Invalid request. Please check the provided data. (status code 400)
     */
    @Operation(
        operationId = "addBankOperation",
        summary = "Add an bank operation",
        tags = { "Bank operation" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Account line added successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BankOperationDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request. Please check the provided data.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/bankOperation",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BankOperationDTO> addBankOperation(
        @Parameter(name = "BankOperationCreationRequest", description = "", required = true) @Valid @RequestBody BankOperationCreationRequest bankOperationCreationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountIndexDTO\" : { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 }, \"accountLineIndexDTO\" : { \"lineAmountDecimal\" : 6, \"accountLineId\" : 0, \"dateAmount\" : \"2000-01-23\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /bankOperation/{bankOperationId} : Delete a bank operation
     *
     * @param bankOperationId  (required)
     * @return Bank operation deleted successfully (status code 200)
     *         or Invalid request. Please check the provided data. (status code 400)
     */
    @Operation(
        operationId = "deleteBankOperation",
        summary = "Delete a bank operation",
        tags = { "Bank operation" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bank operation deleted successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request. Please check the provided data.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/bankOperation/{bankOperationId}"
    )
    default ResponseEntity<Void> deleteBankOperation(
        @Min(1L) @Parameter(name = "bankOperationId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("bankOperationId") Long bankOperationId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /bankOperation/{bankOperationId} : Get a bank operation
     *
     * @param bankOperationId  (required)
     * @return Successfully retrieved bank operation information (status code 200)
     *         or Invalid request. Please check the provided data. (status code 400)
     */
    @Operation(
        operationId = "getBankOperation",
        summary = "Get a bank operation",
        tags = { "Bank operation" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved bank operation information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BankOperationDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request. Please check the provided data.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/bankOperation/{bankOperationId}",
        produces = { "application/json" }
    )
    default ResponseEntity<BankOperationDTO> getBankOperation(
        @Min(1L) @Parameter(name = "bankOperationId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("bankOperationId") Long bankOperationId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountIndexDTO\" : { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 }, \"accountLineIndexDTO\" : { \"lineAmountDecimal\" : 6, \"accountLineId\" : 0, \"dateAmount\" : \"2000-01-23\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /bankOperation/{bankOperationId} : Update the bank operation information
     *
     * @param bankOperationId  (required)
     * @param bankOperationUpdateRequest  (required)
     * @return Bank operation information updated successfully (status code 200)
     *         or Invalid request. Please check the provided data. (status code 400)
     */
    @Operation(
        operationId = "updateBankOperation",
        summary = "Update the bank operation information",
        tags = { "Bank operation" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bank operation information updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BankOperationDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request. Please check the provided data.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/bankOperation/{bankOperationId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BankOperationDTO> updateBankOperation(
        @Min(1L) @Parameter(name = "bankOperationId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("bankOperationId") Long bankOperationId,
        @Parameter(name = "BankOperationUpdateRequest", description = "", required = true) @Valid @RequestBody BankOperationUpdateRequest bankOperationUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountIndexDTO\" : { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 }, \"accountLineIndexDTO\" : { \"lineAmountDecimal\" : 6, \"accountLineId\" : 0, \"dateAmount\" : \"2000-01-23\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
