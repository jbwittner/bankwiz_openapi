/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fr.bankwiz.openapi.api;

import fr.bankwiz.openapi.model.TransactionCreationRequest;
import fr.bankwiz.openapi.model.TransactionDTO;
import fr.bankwiz.openapi.model.TransactionUpdateRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Transaction", description = "API endpoints for transactions")
public interface TransactionApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /transaction : Add an transaction
     *
     * @param transactionCreationRequest  (required)
     * @return Transaction added successfully (status code 200)
     *         or Invalid request. Please check the provided data. (status code 400)
     */
    @Operation(
        operationId = "addTransaction",
        summary = "Add an transaction",
        tags = { "Transaction" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Transaction added successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request. Please check the provided data.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/transaction",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TransactionDTO> addTransaction(
        @Parameter(name = "TransactionCreationRequest", description = "", required = true) @Valid @RequestBody TransactionCreationRequest transactionCreationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountIndexDTO\" : { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 }, \"transactionIndexDTO\" : { \"amountInCents\" : 6, \"date\" : \"2000-01-23\", \"transactionId\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /transaction/{transactionId} : Delete a transaction
     *
     * @param transactionId  (required)
     * @return Transaction deleted successfully (status code 200)
     *         or Invalid request. Please check the provided data. (status code 400)
     */
    @Operation(
        operationId = "deleteTransaction",
        summary = "Delete a transaction",
        tags = { "Transaction" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Transaction deleted successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request. Please check the provided data.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/transaction/{transactionId}"
    )
    default ResponseEntity<Void> deleteTransaction(
        @Min(1) @Parameter(name = "transactionId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("transactionId") Integer transactionId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transaction/{transactionId} : Get a transaction
     *
     * @param transactionId  (required)
     * @return Successfully retrieved transaction information (status code 200)
     *         or Invalid request. Please check the provided data. (status code 400)
     */
    @Operation(
        operationId = "getTransaction",
        summary = "Get a transaction",
        tags = { "Transaction" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved transaction information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request. Please check the provided data.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transaction/{transactionId}",
        produces = { "application/json" }
    )
    default ResponseEntity<TransactionDTO> getTransaction(
        @Min(1) @Parameter(name = "transactionId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("transactionId") Integer transactionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountIndexDTO\" : { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 }, \"transactionIndexDTO\" : { \"amountInCents\" : 6, \"date\" : \"2000-01-23\", \"transactionId\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transaction/findByBankAccount : Get all transactions for a bankAccount
     *
     * @param bankAccountId  (required)
     * @return Successfully retrieved the list of transactions (status code 200)
     *         or Invalid request. Please check the provided data. (status code 400)
     */
    @Operation(
        operationId = "getTransactionsByBankAccount",
        summary = "Get all transactions for a bankAccount",
        tags = { "Transaction" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the list of transactions", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TransactionDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request. Please check the provided data.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transaction/findByBankAccount",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TransactionDTO>> getTransactionsByBankAccount(
        @NotNull @Min(1) @Parameter(name = "bankAccountId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "bankAccountId", required = true) Integer bankAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"accountIndexDTO\" : { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 }, \"transactionIndexDTO\" : { \"amountInCents\" : 6, \"date\" : \"2000-01-23\", \"transactionId\" : 0 } }, { \"accountIndexDTO\" : { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 }, \"transactionIndexDTO\" : { \"amountInCents\" : 6, \"date\" : \"2000-01-23\", \"transactionId\" : 0 } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transaction/findByGroup : Get all transactions for a group
     *
     * @param groupId  (required)
     * @return Successfully retrieved the list of transactions (status code 200)
     *         or Invalid request. Please check the provided data. (status code 400)
     */
    @Operation(
        operationId = "getTransactionsByGroup",
        summary = "Get all transactions for a group",
        tags = { "Transaction" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the list of transactions", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TransactionDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request. Please check the provided data.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transaction/findByGroup",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TransactionDTO>> getTransactionsByGroup(
        @NotNull @Min(1) @Parameter(name = "groupId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = true) Integer groupId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"accountIndexDTO\" : { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 }, \"transactionIndexDTO\" : { \"amountInCents\" : 6, \"date\" : \"2000-01-23\", \"transactionId\" : 0 } }, { \"accountIndexDTO\" : { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 }, \"transactionIndexDTO\" : { \"amountInCents\" : 6, \"date\" : \"2000-01-23\", \"transactionId\" : 0 } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /transaction/{transactionId} : Update the transaction information
     *
     * @param transactionId  (required)
     * @param transactionUpdateRequest  (required)
     * @return Transaction information updated successfully (status code 200)
     *         or Invalid request. Please check the provided data. (status code 400)
     */
    @Operation(
        operationId = "updateTransaction",
        summary = "Update the transaction information",
        tags = { "Transaction" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Transaction information updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request. Please check the provided data.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/transaction/{transactionId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TransactionDTO> updateTransaction(
        @Min(1) @Parameter(name = "transactionId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("transactionId") Integer transactionId,
        @Parameter(name = "TransactionUpdateRequest", description = "", required = true) @Valid @RequestBody TransactionUpdateRequest transactionUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountIndexDTO\" : { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 }, \"transactionIndexDTO\" : { \"amountInCents\" : 6, \"date\" : \"2000-01-23\", \"transactionId\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
