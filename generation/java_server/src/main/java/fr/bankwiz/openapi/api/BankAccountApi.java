/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fr.bankwiz.openapi.api;

import fr.bankwiz.openapi.model.BankAccountCreationRequest;
import fr.bankwiz.openapi.model.BankAccountDTO;
import fr.bankwiz.openapi.model.BankAccountGroupDTO;
import fr.bankwiz.openapi.model.BankAccountUpdateRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Bank account", description = "the Bank account API")
public interface BankAccountApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /bankAccount : Add an account
     *
     * @param bankAccountCreationRequest  (required)
     * @return Account added successfully (status code 200)
     *         or Invalid request. Please check the provided data. (status code 400)
     */
    @Operation(
        operationId = "addAccount",
        summary = "Add an account",
        tags = { "Bank account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Account added successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BankAccountDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request. Please check the provided data.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/bankAccount",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BankAccountDTO> addAccount(
        @Parameter(name = "BankAccountCreationRequest", description = "", required = true) @Valid @RequestBody BankAccountCreationRequest bankAccountCreationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"groupIndexDTO\" : { \"groupName\" : \"groupName\", \"groupId\" : 0 }, \"accountIndexDTO\" : { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /bankAccount/{bankAccountId} : Delete an account
     *
     * @param bankAccountId  (required)
     * @return Bank account deleted successfully (status code 200)
     *         or Invalid request. Please check the provided data. (status code 400)
     */
    @Operation(
        operationId = "deleteAccount",
        summary = "Delete an account",
        tags = { "Bank account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bank account deleted successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request. Please check the provided data.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/bankAccount/{bankAccountId}"
    )
    default ResponseEntity<Void> deleteAccount(
        @Min(1) @Parameter(name = "bankAccountId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("bankAccountId") Integer bankAccountId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /bankAccount/{bankAccountId} : Get an account
     *
     * @param bankAccountId  (required)
     * @return Successfully retrieved account information (status code 200)
     *         or Invalid request. Please check the provided data. (status code 400)
     */
    @Operation(
        operationId = "getAccount",
        summary = "Get an account",
        tags = { "Bank account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved account information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BankAccountDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request. Please check the provided data.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/bankAccount/{bankAccountId}",
        produces = { "application/json" }
    )
    default ResponseEntity<BankAccountDTO> getAccount(
        @Min(1) @Parameter(name = "bankAccountId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("bankAccountId") Integer bankAccountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"groupIndexDTO\" : { \"groupName\" : \"groupName\", \"groupId\" : 0 }, \"accountIndexDTO\" : { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /bankAccount/bankAccounts : Get my bank accounts
     *
     * @return Successfully retrieved the list of bank accounts (status code 200)
     *         or Invalid request. Please check the provided data. (status code 400)
     */
    @Operation(
        operationId = "getBankAccounts",
        summary = "Get my bank accounts",
        tags = { "Bank account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the list of bank accounts", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BankAccountGroupDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request. Please check the provided data.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/bankAccount/bankAccounts",
        produces = { "application/json" }
    )
    default ResponseEntity<List<BankAccountGroupDTO>> getBankAccounts(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"groupIndexDTO\" : { \"groupName\" : \"groupName\", \"groupId\" : 0 }, \"accountIndexDTOs\" : [ { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 }, { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 } ] }, { \"groupIndexDTO\" : { \"groupName\" : \"groupName\", \"groupId\" : 0 }, \"accountIndexDTOs\" : [ { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 }, { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /bankAccount/{bankAccountId} : Update account information
     *
     * @param bankAccountId  (required)
     * @param bankAccountUpdateRequest  (required)
     * @return Bank account information updated successfully (status code 200)
     *         or Invalid request. Please check the provided data. (status code 400)
     */
    @Operation(
        operationId = "updateAccount",
        summary = "Update account information",
        tags = { "Bank account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bank account information updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BankAccountDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request. Please check the provided data.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/bankAccount/{bankAccountId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BankAccountDTO> updateAccount(
        @Min(1) @Parameter(name = "bankAccountId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("bankAccountId") Integer bankAccountId,
        @Parameter(name = "BankAccountUpdateRequest", description = "", required = true) @Valid @RequestBody BankAccountUpdateRequest bankAccountUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"groupIndexDTO\" : { \"groupName\" : \"groupName\", \"groupId\" : 0 }, \"accountIndexDTO\" : { \"accountId\" : 6, \"accountName\" : \"accountName\", \"baseAmountDecimal\" : 1 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
